import json
from web3 import Web3, HTTPProvider
from web3.contract import ConciseContract

infura_url = "https://ropsten.infura.io/v3/4740737568b946a0807303e4d1bca64a"

web3 = Web3(Web3.HTTPProvider(infura_url))
print(web3.isConnected())

contract_address = Web3.toChecksumAddress("0x3e20433A25FD43bDC7eBd778107380bB3159153E")
private_key = "27830e81221b29c36ab72be62b5989d5366c404c14d9045a53af39b60071dcf1"
account = web3.eth.account.privateKeyToAccount(private_key)
account_address= account.address
print(account_address)

abi = json.loads('[{"constant":false,"inputs":[{"name":"_name","type":"string"}],"name":"addPerson","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"peopleCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"person","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"people","outputs":[{"name":"id","type":"uint256"},{"name":"name","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"id","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}]')
bytecode = '608060405260008055635e67c78c60025534801561001c57600080fd5b506105c18061002c6000396000f3fe608060405260043610610067576000357c0100000000000000000000000000000000000000000000000000000000900480630bf2ee8d1461006c578063267c68e01461013457806377ec2b551461015f5780639e7a13ad146101ef578063af640d0f146102aa575b600080fd5b34801561007857600080fd5b506101326004803603602081101561008f57600080fd5b81019080803590602001906401000000008111156100ac57600080fd5b8201836020820111156100be57600080fd5b803590602001918460018302840111640100000000831117156100e057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506102d5565b005b34801561014057600080fd5b50610149610346565b6040518082815260200191505060405180910390f35b34801561016b57600080fd5b5061017461034c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b4578082015181840152602081019050610199565b50505050905090810190601f1680156101e15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101fb57600080fd5b506102286004803603602081101561021257600080fd5b8101908080359060200190929190505050610403565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561026e578082015181840152602081019050610253565b50505050905090810190601f16801561029b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156102b657600080fd5b506102bf6104bf565b6040518082815260200191505060405180910390f35b60025442101515156102e657600080fd5b6102ee6104de565b6040805190810160405280600054815260200182815250600160008054815260200190815260200160002060008201518160000155602082015181600101908051906020019061033f9291906104f0565b5090505050565b60005481565b606060016000805481526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103f95780601f106103ce576101008083540402835291602001916103f9565b820191906000526020600020905b8154815290600101906020018083116103dc57829003601f168201915b5050505050905090565b6001602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104b55780601f1061048a576101008083540402835291602001916104b5565b820191906000526020600020905b81548152906001019060200180831161049857829003601f168201915b5050505050905082565b6000600160008054815260200190815260200160002060000154905090565b60016000808282540192505081905550565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061053157805160ff191683800117855561055f565b8280016001018555821561055f579182015b8281111561055e578251825591602001919060010190610543565b5b50905061056c9190610570565b5090565b61059291905b8082111561058e576000816000905550600101610576565b5090565b9056fea165627a7a723058204e08b4aaeaf0102392780156bddcdd498ddaccfea760ac9da5d9aecad712e3460029'

#deploy contract
MyContract = web3.eth.contract(abi=abi, bytecode=bytecode)
#contract instance
MyContract_instance = web3.eth.contract(abi=abi, address=contract_address)

tx = MyContract_instance.functions.addPerson('Huy').buildTransaction({'nonce': web3.eth.getTransactionCount(account_address)})

#sign transaction
signed_tx = web3.eth.account.signTransaction(tx, private_key)

#send transaction
tx_hash= web3.eth.sendRawTransaction(signed_tx.rawTransaction)
print(web3.toHex(tx_hash))
#transaction_hash: 0xe7e2eeb7a49e1fffceb01256790b2c73d2f603bf1b87deb88eadfcce32df95bbb